`define NUM_BITS 5  // Try 1, 2, 3, 4, 5
module D_FlipFlop(output reg Q, input D, input clear, input clk);
   always @(posedge clk)
   begin
      if(clear) Q <= 0;
      else Q <= D;
   end
endmodule
module half_adder(sum, carry, a, b);
   input a, b;
   output sum, carry;
   xor(sum, a, b);
   and(carry, a, b);
endmodule

module full_adder(sum, carry, x, y, z);
   input x, y, z;
   output sum, carry;
   wire s1, c1, c2;
   half_adder h1(s1, c1, x, y);
   half_adder h2(sum, c2, s1, z);
   or(carry, c1, c2);
endmodule


module mux(out, a, b, c, d, s0, s1);
 output out;
 input a, b, c, d, s0, s1;
 wire sobar, s1bar, T1, T2, T3, T4;

 not (s0bar, s0), (s1bar, s1);
 and (T1, a, s0bar, s1bar), (T2, b, s0bar, s1),(T3, c, s0, s1bar), (T4, d, s0, s1);
 or(out, T1, T2, T3, T4);
endmodule

module arthemtic(D,Cout,S1,S0,A,B,Cin);
 parameter N = `NUM_BITS -1 ;
 output[N:0] D;
 input S0,S1;
 input Cin;
 input [N:0] A;
 input [N:0] B;
 wire [N:0]W;
 output Cout;
 wire [`NUM_BITS:0]C;
 wire logic0= 0 ;
 wire logic1= 1 ;
  
   generate
   genvar i;
   buf(C[0],Cin); 
   for (i=0;i<=N;i=i+1)begin
   mux m (W[i],B[i],!B[i],logic0,logic1,S1,S0);
   end
   endgenerate
   generate  
   for (i=0;i<=N;i=i+1)begin
      full_adder f1(D[i],C[i+1],A[i],W[i],C[i]);
   end
   buf(Cout,C[`NUM_BITS]);
   endgenerate

endmodule
module logic_circuit(E,A,B,S1,S0);
 parameter N = `NUM_BITS -1 ;
 output[N:0] E;
 input S0,S1;
 input [N:0]A;
 input [N:0]B;
 wire [N:0] w1;
 wire [N:0]w2;
 wire [N:0]w3;
 wire w; // do nothing
 for (i=0;i<=N;i=i+1) begin
 and(w1[i],A[i],B[i]);
 or (w2[i],A[i],B[i]);
 xor(w3[i],A[i],B[i]);
 end
 generate
 genvar i;
 for (i=0;i<=N;i=i+1) begin
 mux m(E[i],w1[i],w2[i],w3[i],w,S1,S0);
 end
 endgenerate
endmodule
module shift(D,A, clk, clear);
 parameter N = `NUM_BITS -1 ;
 input clk ;
 input clear ;
 input [N:0] A;
 output [N:0] D;
 generate
 genvar i;
 for (i=0;i<=N;i=i+1) begin
  D_FlipFlop D1(D[i],A[i+1], clear, clk);
 end
 endgenerate
endmodule
module ALU(F,Cout,A,B,S3,S2,S1,S0,clk,clear,Cin);
parameter N = `NUM_BITS -1 ;
 input S0,S1,S2,S3;
 input Cin;
 input clk;
 input clear;
 output Cout;
 input [N:0]A;
 input [N:0]B;
 wire [N:0]D;
 wire [N:0]E;
 wire [N:0]R;
 wire w; //do nothing
 output [N:0] F;
 arthemtic a (D,Cout,S1,S0,A,B,Cin);
 logic_circuit log (E,A,B,S1,S0);
 shift S (R,A,clk,clear);
 generate
 genvar i;   
 for (i =0 ;i<=N;i=i+1 ) begin
   mux m (F[i],D[i],E[i],R[i],w,S3,S2);
 end
 endgenerate 
endmodule
module ALU_tb();
 parameter N = `NUM_BITS -1 ;
 reg [N:0]a;
 reg [N:0]b;
 reg cin;
 wire cout;
 reg s0,s1,s2,s3,clear,clk; 
 wire [N:0]f;
 ALU A1(f,cout,a,b,s3,s2,s1,s0,clk,clear,cin);
  initial begin
   a = 5'b00100; b=5'b00101; s3=1'b0; s2=1'b1; s1=1'b1; s0=1'b0; cin=1'b0; clk=1'b1; clear = 1'b0; //we can change the value to get all operations
       $monitor("s3=%b ,s2=%b ,s1=%b ,s0=%b ,cin=%b, a= %b, b = %b , f = %b ,cout=%b"
               ,s3,s2,s1,s0,cin,a,b,f,cout);
  end
endmodule
